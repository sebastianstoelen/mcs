/*********************************
	Een sudoku-oplosser in IDP
*********************************/

vocabulary V {

	type row isa int		 // The rows of the grid (1 to 9)
	type column isa int	 // The columns of the grid (1 to 9)
	type number	isa int	 // The numbers of the grid (1 to 9)
	type block isa int	 // The 9 blocks of 3x3 where the numbers need to be entered

	liesInBlock(row, column, block)	
		//This declares which cells belongs to which blocks.
		//This means that liesInBlock(r, k, b) is true if and only if
		// the cell on row r and column c lies in block b.

	solution(row, column) : number	
		//The solution: every cell has a number
		//A cell is represented by its row and column.
		//For example: solution(4,5) = 9 means that the cell on row 4 and column 5 contains a 9.
}
theory T : V {

	//On every row every number is present.
	! r [row] n [number]: ? c [column]: solution(r,c) = n.

	//In every column every number is present.
	! c [column] n [number]: ? r [row]: solution(r,c) = n.

	//In every block every number is present.
	! b [block] n [number]: #{r c: liesInBlock(r,c,b) & solution(r,c) = n} = 1.
    //Sol without aggregate: ! b : ! n : ? r c : liesInBlock(r,c,b) & solution(r,c) = n.

	//Define which cells lie in which block
	{
		liesInBlock(r,k,b) <-
			b = (((r - 1) - (r - 1)%3) / 3) * 3 + (((k - 1)-(k - 1)%3) / 3) + 1.
	}     
}

include "sudoku_solution.aidp"
include "sudoku_draw.idp"
include "sudoku_instance_1.idp"
	//include "sudoku_instance_2.idp"
include "idpd3/run.idp"