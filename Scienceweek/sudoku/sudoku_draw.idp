
include "idpd3/idpd3_voc.idp"

vocabulary V_out {
    extern vocabulary idpd3::V_out
    extern vocabulary V
    
    toKey(row, column) : key
    toText(row, column) : key
    toString(number) : label
    error(row, column)
}


theory T_D3 : V_out {
 {
    error(r, k) <- solution(r, k) = c & #{r1 : solution(r1, k) = c} > 1.
    error(r, k) <- solution(r, k) = c & #{k1 : solution(r, k1) = c} > 1.
    error(r, k) <- solution(r, k) = c & liesInBlock(r, k, b) & 
                  #{r1, k1 : solution(r1, k1) = c & liesInBlock(r1, k1, b)} > 1.
  }
  {
    d3_type(1, key) = rect     <- toKey(r, k) = key.
    d3_rect_width(1, key) = 4  <- toKey(r, k) = key.
    d3_rect_height(1, key) = 4 <- toKey(r, k) = key.
    d3_color(1, key) = "white" <- toKey(r, k) = key & ~error(r, k).
    d3_color(1, key) = "red"   <- toKey(r, k) = key & error(r, k).
    d3_x(1, key) = 5*k         <- toKey(r, k) = key.
    d3_y(1, key) = 5*r         <- toKey(r, k) = key.

    d3_type(1, key) = text     <- toText(r, k) = key.
    d3_x(1, key) = 5*k         <- toText(r, k) = key.
    d3_y(1, key) = 5*r + 1     <- toText(r, k) = key.
    d3_text_size(1, key) = 3   <- toText(r, k) = key.
    d3_text_label(1, key) =  t <- toText(r, k) = key & solution(r, k) = c 
                                & toString(c) = t.
    d3_color(1, key) = "black" <- toText(r, k) = key.
    d3_order(1, key) = 0       <- toKey(r, k) = key.
    d3_order(1, key) = 1       <- toText(r, k) = key.
  }

  !t : ! x: d3_width(t) = x => ~?y : x<y.
  !t : ! x: d3_height(t) = x => ~?y : x<y.
}

procedure toKey(r, k) {
  return "s"..r..k
}
procedure toText(r, k) {
  return "q"..r..k
}
procedure toString(el) {
  return el;
}

